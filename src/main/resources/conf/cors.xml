<?xml version="1.0" encoding="UTF-8"?>

<!--
	HTTP CORS(Cross-Origin Resource Sharing) configuration.
-->
<configuration>

	<!--
		Duplicated set tag for more CORS setting.
	-->
	<cors>
		<!--
			pathMapping(a string in path mapping URI or Ant-style path pattern string):

			Required.

			Enable cross-origin request handling for the specified path pattern. 

			Exact path mapping URIs (such as "/admin") are supported as well as Ant-style path
			patterns (such as "/admin/**"). 
		-->
		<pathMapping>/**</pathMapping>
		<!--
			allowedMethods(include array in method tags):

			Set the HTTP methods to allow, e.g. "GET", "POST", etc. The special value "*"
			allows all methods. 

			By default "simple" methods, i.e. GET, HEAD, and POST are allowed when the sub
			tags of method are not set.
		-->
		<allowedMethods>
			<!--
				method:
				Inner value allowed of "GET", "POST", "HEAD" or other HTTP request method or "*".
			-->
			<method>*</method>
		</allowedMethods>

		<!--
			allowedOrigins(include array in origin tags):

			The list of allowed origins that be specific origins, e.g. "http://domain1.com",
			or "*" for all origins. 

			A matched origin is listed in the Access-Control-Allow-Origin response header
			of preflight actual CORS requests. 

			Note: CORS checks use values from "Forwarded" (RFC 7239), "X-Forwarded-Host",
			"X-Forwarded-Port", and "X-Forwarded-Proto" headers, if present, in order to
			reflect the client-originated address. Consider using the ForwardedHeaderFilter
			in order to choose from a central place whether to extract and use, or to discard
			such headers. See the Spring Framework reference for more on this filter.

			By default, all origins are allowed when the sub tags of origin are not set. 
		-->
		<allowedOrigins>
			<!--
				origin:
				Inner value allowed of a specific origin or "*".
			-->
			<origin>*</origin>
		</allowedOrigins>

		<!--
			allowedHeaders(include array in header tags):

			Set the list of headers that a preflight request can list as allowed for use
			during an actual request. The special value "*" may be used to allow all headers. 

			A header name is not required to be listed if it is one of: Cache-Control,
			Content-Language, Expires, Last-Modified, or Pragma as per the CORS spec.

			By default all headers are allowed when the sub tags of header are not set.
		-->
		<allowedHeaders>
			<!--
				header:
				Inner value allowed of a header name or "*".
			-->
			<header>*</header>
		</allowedHeaders>

		<!--
			exposedHeaders(include array in header tags):

			Set the list of response headers other than "simple" headers, i.e. Cache-Control,
			Content-Language, Content-Type, Expires, Last-Modified, or Pragma, that an actual
			response might have and can be exposed. 

			Note that "*" is not supported on this property. 

			By default no exposed headers are set when the sub tags of header are not set.
		-->
		<exposedHeaders>
			<!--
				header:
				Inner value allowed of a header name but not support "*".
			-->
		</exposedHeaders>

		<!--
			allowCredentials(Inner value in "true", "false" and ""):

			Whether the browser should send credentials, such as cookies along with cross
			domain requests, to the annotated endpoint. The configured value is set on the
			Access-Control-Allow-Credentials response header of preflight requests.

			NOTE: Be aware that this option establishes a high level of trust with the
			configured domains and also increases the surface attack of the web application
			by exposing sensitive user-specific information such as cookies and CSRF tokens. 

			By default the allow credentials is not set when the value is "" in which case
			the Access-Control-Allow-Credentials exposed header is also not set and
			credentials are therefore not allowed.
		-->
		<allowCredentials></allowCredentials>

		<!--
			maxAge(Inner value in a number from "0" to "2147483647" or just a ""):

			Configure how long in seconds the response from a pre-flight request can be
			cached by clients.

			By default the max age is not set when the value is "" in which case is set to
			1800 seconds (30 minutes).
		-->
		<maxAge></maxAge>
	</cors>

</configuration>
